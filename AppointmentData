package Models;

import Helper.JDBC;
import javafx.collections.FXCollections;
import javafx.collections.ObservableList;

import java.sql.PreparedStatement;
import java.sql.ResultSet;
import java.sql.SQLException;
import java.sql.Timestamp;
import java.time.LocalDateTime;



/**
 * The class that contains SQL statements to filter data for Appointments.
 */
public class AppointmentDatabase {

    /** Gets a list of Appointment Objects for the next 30 days
     * @return ObservableList returns appointments
     * @throws SQLException SQLException
     */
    public static ObservableList<Appointment> getAppointmentsByMonth() throws SQLException {
        ObservableList<Appointment> appointments = FXCollections.observableArrayList();

        LocalDateTime now = LocalDateTime.now();
        LocalDateTime future = now.plusDays(30);

        String query = "SELECT * FROM appointments AS a INNER JOIN contacts AS c ON a.Contact_ID=c.Contact_ID WHERE Start < ? AND Start > ?;";

        DataBaseQuery.setPreparedStatement(JDBC.getConnection(), query);
        PreparedStatement preparedStatement = DataBaseQuery.getPreparedStatement();

        preparedStatement.setDate(1, java.sql.Date.valueOf(now.toLocalDate()));
        preparedStatement.setDate(2, java.sql.Date.valueOf(future.toLocalDate()));

        try {
            preparedStatement.execute();
            ResultSet results = preparedStatement.getResultSet();

            while (results.next()) {
                Appointment newApp = new Appointment(
                        results.getInt("Appointment_ID"),
                        results.getString("Title"),
                        results.getString("Description"),
                        results.getString("Location"),
                        results.getString("Type"),
                        results.getDate("Start").toLocalDate(),
                        results.getTimestamp("Start").toLocalDateTime(),
                        results.getDate("End").toLocalDate(),
                        results.getTimestamp("End").toLocalDateTime(),
                        results.getInt("Customer_ID"),
                        results.getInt("User_ID"),
                        results.getInt("Contact_ID"),
                        results.getString("Contact_Name")
                );

                appointments.add(newApp);
            }
            return appointments;

        } catch (Exception e) {
            System.out.println("Error: " + e.getMessage());
            return null;
        }
    }

    /** Gets a list of appointments in the next 7 days
     * @return ObservableList returns appointments
     * @throws SQLException SQLException
     */
    public static ObservableList<Appointment> getAppointmentsByWeek() throws SQLException {
        ObservableList<Appointment> appointments = FXCollections.observableArrayList();

        LocalDateTime today = LocalDateTime.now();
        LocalDateTime future = today.plusDays(7);

        String query = "SELECT * FROM appointments AS a INNER JOIN contacts AS c ON a.Contact_ID=c.Contact_ID WHERE Start < ? AND Start > ?;";

        DataBaseQuery.setPreparedStatement(JDBC.getConnection(), query);
        PreparedStatement preparedStatement = DataBaseQuery.getPreparedStatement();

        preparedStatement.setDate(1, java.sql.Date.valueOf(today.toLocalDate()));
        preparedStatement.setDate(2, java.sql.Date.valueOf(future.toLocalDate()));

        try {
            preparedStatement.execute();
            ResultSet results = preparedStatement.getResultSet();

            while (results.next()) {
                Appointment newAppointment = new Appointment(
                        results.getInt("Appointment_ID"),
                        results.getString("Title"),
                        results.getString("Description"),
                        results.getString("Location"),
                        results.getString("Type"),
                        results.getDate("Start").toLocalDate(),
                        results.getTimestamp("Start").toLocalDateTime(),
                        results.getDate("End").toLocalDate(),
                        results.getTimestamp("End").toLocalDateTime(),
                        results.getInt("Customer_ID"),
                        results.getInt("User_ID"),
                        results.getInt("Contact_ID"),
                        results.getString("Contact_Name")
                );

                appointments.add(newAppointment);
            }
            return appointments;

        } catch (Exception e) {
            System.out.println("Error: " + e.getMessage());
            return null;
        }
    }

    /** Creates a new Appointment
     * @param contactName String value for Contact Name
     * @param title String value for Title
     * @param description String value for Description
     * @param location String value for Location
     * @param type String value for Type
     * @param start LocalDateTime value for Start of appointment
     * @param end LocalDateTime value for End of appointment
     * @param customerId Integer value for Customer ID
     * @param userID Integer value for User ID
     * @return Boolean Returns true if Appointment was successfully created and false if Appointment creation failed
     * @throws SQLException SQLException
     */
    public static boolean newAppointment(String contactName, String title, String description, String location, String type,
                                         LocalDateTime start, LocalDateTime end, Integer customerId, Integer userID) throws SQLException {

        Contact contactInfo = ContactsDatabase.getContactId(contactName);

        String insertStatement = "INSERT INTO appointments(Title, Description, Location, Type, Start, End, Customer_ID, Contact_ID, User_ID) VALUES (?, ?, ?, ?, ?, ?, ?, ?, ?)";

        DataBaseQuery.setPreparedStatement(JDBC.getConnection(), insertStatement);
        PreparedStatement preparedStatement = DataBaseQuery.getPreparedStatement();

        preparedStatement.setString(1, title);
        preparedStatement.setString(2, description);
        preparedStatement.setString(3, location);
        preparedStatement.setString(4, type);
        preparedStatement.setTimestamp(5, Timestamp.valueOf(start));
        preparedStatement.setTimestamp(6, Timestamp.valueOf(end));
        preparedStatement.setInt(7, customerId);
        preparedStatement.setInt(8, contactInfo.getContactId());
        preparedStatement.setInt(9, userID);

        try {
            preparedStatement.execute();
            return true;
        }

        catch (Exception e) {
            System.out.println("Error: " + e.getMessage());
            return false;
        }
    }

    /** Gets Appointment and Contact Objects from JOIN on contact_ID
     * @return ObservableList returns appointments
     * @throws SQLException SQLException
     */
    public static ObservableList<Appointment> getAppointments() throws SQLException {
        ObservableList<Appointment> appointments = FXCollections.observableArrayList();

        String query = "SELECT * FROM appointments AS a INNER JOIN contacts AS c ON a.Contact_ID=c.Contact_ID;";

        DataBaseQuery.setPreparedStatement(JDBC.getConnection(), query);
        PreparedStatement preparedStatement = DataBaseQuery.getPreparedStatement();

        try {
            preparedStatement.execute();
            ResultSet results = preparedStatement.getResultSet();

            while (results.next()) {
                Appointment newAppointment = new Appointment(
                        results.getInt("Appointment_ID"),
                        results.getString("Title"),
                        results.getString("Description"),
                        results.getString("Location"),
                        results.getString("Type"),
                        results.getDate("Start").toLocalDate(),
                        results.getTimestamp("Start").toLocalDateTime(),
                        results.getDate("End").toLocalDate(),
                        results.getTimestamp("End").toLocalDateTime(),
                        results.getInt("Customer_ID"),
                        results.getInt("User_ID"),
                        results.getInt("Contact_ID"),
                        results.getString("Contact_Name")
                );

                appointments.add(newAppointment);
            }

            return appointments;

        } catch (Exception e) {
            System.out.println("Error: " + e.getMessage());
            return null;
        }
    }

    /** Deletes an appointment using Appointment ID
     * @param appointmentId Appointment ID
     * @return Boolean returns true if appointment was successfully deleted and false if appointment failed to delete
     * @throws SQLException SQLException
     */
    public static boolean deleteAppointment(int appointmentId) throws SQLException {
        String statement = "DELETE from appointments WHERE Appointment_Id=?";

        DataBaseQuery.setPreparedStatement(JDBC.getConnection(), statement);
        PreparedStatement preparedStatement = DataBaseQuery.getPreparedStatement();

        preparedStatement.setInt(1, appointmentId);

        try {
            preparedStatement.execute();
            return true;
        }

        catch (Exception e) {
            return false;
        }
    }

    /** Deletes an appointment using Customer ID
     * @param customerID Customer ID
     * @return Boolean returns true if appointment was successfully deleted and false if appointment failed to delete
     * @throws SQLException SQLException
     */
    public static boolean deleteAppointmentByCustID(int customerID) throws SQLException{

        String statement = "DELETE from appointments WHERE Customer_Id=?";

        DataBaseQuery.setPreparedStatement(JDBC.getConnection(), statement);
        PreparedStatement preparedStatement = DataBaseQuery.getPreparedStatement();

        preparedStatement.setInt(1, customerID);

        try {
            preparedStatement.execute();
            return true;
        }

        catch (Exception e) {
            return false;
        }
    }


    /** Updates an appointment using Appointment ID
     * @param contactName String value for Contact Name
     * @param title String value for Title
     * @param description String value for Description
     * @param location String value for Location
     * @param type String value for Type
     * @param start LocalDateTime value for Start
     * @param end LocalDateTime value for End
     * @param customerId Int value for Customer ID
     * @param userID Int value for User ID
     * @param appointmentID Int value for Appointment ID
     * @return Boolean Returns true if the Appointment was successfully revised and false if the Appointment revision failed
     * @throws SQLException SQLException
     */
    public static boolean reviseAppointment(String contactName, String title, String description, String location, String type, LocalDateTime start, LocalDateTime end, Integer customerId, Integer userID, Integer appointmentID) throws SQLException {
        Contact contact = ContactsDatabase.getContactId(contactName);

        String statement = "UPDATE appointments SET Title=?, Description=?, Location=?, Type=?, Start=?, End=?, Customer_ID=?, Contact_ID=?, User_ID=? WHERE Appointment_ID = ?;";

        DataBaseQuery.setPreparedStatement(JDBC.getConnection(), statement);
        PreparedStatement preparedStatement = DataBaseQuery.getPreparedStatement();

        preparedStatement.setString(1, title);
        preparedStatement.setString(2, description);
        preparedStatement.setString(3, location);
        preparedStatement.setString(4, type);
        preparedStatement.setTimestamp(5, Timestamp.valueOf(start));
        preparedStatement.setTimestamp(6, Timestamp.valueOf(end));
        preparedStatement.setInt(7, customerId);
        preparedStatement.setInt(8, contact.getContactId());
        preparedStatement.setInt(9, userID);
        preparedStatement.setInt(10, appointmentID);

        try {
            preparedStatement.execute();
            return true;
        }

        catch (Exception e) {
            System.out.println("Error: " + e.getMessage());
            return false;
        }
    }

    /** Gets an appointment by Customer ID
     * @param CustomerID Integer value for Customer ID
     * @return ObservableList List for Appointments
     * @throws SQLException SQLException
     */
    public static ObservableList<Appointment> getAppointmentsByCustomerID(int CustomerID) throws SQLException {
        ObservableList<Appointment> appointments = FXCollections.observableArrayList();

        String query = "SELECT * FROM appointments AS a INNER JOIN contacts AS c ON a.Contact_ID=c.Contact_ID WHERE Customer_ID=?;";

        DataBaseQuery.setPreparedStatement(JDBC.getConnection(), query);
        PreparedStatement preparedStatement = DataBaseQuery.getPreparedStatement();

        preparedStatement.setInt(1, CustomerID);

        try {
            preparedStatement.execute();
            ResultSet results = preparedStatement.getResultSet();

            // Forward scroll resultSet
            while (results.next()) {
                Appointment newAppointment = new Appointment(
                        results.getInt("Appointment_ID"),
                        results.getString("Title"),
                        results.getString("Description"),
                        results.getString("Location"),
                        results.getString("Type"),
                        results.getDate("Start").toLocalDate(),
                        results.getTimestamp("Start").toLocalDateTime(),
                        results.getDate("End").toLocalDate(),
                        results.getTimestamp("End").toLocalDateTime(),
                        results.getInt("Customer_ID"),
                        results.getInt("User_ID"),
                        results.getInt("Contact_ID"),
                        results.getString("Contact_Name")
                );

                appointments.add(newAppointment);
            }

            return appointments;
        }

        catch (Exception e) {
            System.out.println("Error: " + e.getMessage());
            return null;
        }
    }

    /** Gets an appointment by Contact ID
     * @param contactID Int value for Contact ID
     * @return ObservableList List for Appointments
     * @throws SQLException SQLException
     */
    public static ObservableList<Appointment> getAppointmentsByContactID(int contactID) throws SQLException {
        ObservableList<Appointment> appointments = FXCollections.observableArrayList();

        String query = "SELECT * FROM appointments AS a INNER JOIN contacts AS c ON a.Contact_ID=c.Contact_ID WHERE a.Contact_ID=?;";

        DataBaseQuery.setPreparedStatement(JDBC.getConnection(), query);
        PreparedStatement preparedStatement = DataBaseQuery.getPreparedStatement();

        preparedStatement.setInt(1, contactID);

        try {
            preparedStatement.execute();
            ResultSet results = preparedStatement.getResultSet();

            // Forward scroll resultSet
            while (results.next()) {
                Appointment newAppointment = new Appointment(
                        results.getInt("Appointment_ID"),
                        results.getString("Title"),
                        results.getString("Description"),
                        results.getString("Location"),
                        results.getString("Type"),
                        results.getDate("Start").toLocalDate(),
                        results.getTimestamp("Start").toLocalDateTime(),
                        results.getDate("End").toLocalDate(),
                        results.getTimestamp("End").toLocalDateTime(),
                        results.getInt("Customer_ID"),
                        results.getInt("User_ID"),
                        results.getInt("Contact_ID"),
                        results.getString("Contact_Name")
                );

                appointments.add(newAppointment);
            }

            return appointments;
        }

        catch (Exception e) {
            System.out.println("Error: " + e.getMessage());
            return null;
        }
    }

    /** Gets an appointment by Appointment ID
     * @param AppointmentID Int value of Appointment ID
     * @return Appointment
     * @throws SQLException SQLException
     */
    public static Appointment getAppointmentByAppointmentID(int AppointmentID) throws SQLException {

        String query = "SELECT * FROM appointments AS a INNER JOIN contacts AS c ON a.Contact_ID=c.Contact_ID WHERE Appointment_ID=?;";

        DataBaseQuery.setPreparedStatement(JDBC.getConnection(), query);
        PreparedStatement preparedStatement = DataBaseQuery.getPreparedStatement();

        preparedStatement.setInt(1, AppointmentID);

        try {
            preparedStatement.execute();
            ResultSet results = preparedStatement.getResultSet();

            // Forward scroll resultSet
            while (results.next()) {
                Appointment newAppointment = new Appointment(
                        results.getInt("Appointment_ID"),
                        results.getString("Title"),
                        results.getString("Description"),
                        results.getString("Location"),
                        results.getString("Type"),
                        results.getDate("Start").toLocalDate(),
                        results.getTimestamp("Start").toLocalDateTime(),
                        results.getDate("End").toLocalDate(),
                        results.getTimestamp("End").toLocalDateTime(),
                        results.getInt("Customer_ID"),
                        results.getInt("User_ID"),
                        results.getInt("Contact_ID"),
                        results.getString("Contact_Name")
                );

                return newAppointment;
            }
        }

        catch (Exception e) {
            System.out.println("Error: " + e.getMessage());
        }

        return null;
    }
}
