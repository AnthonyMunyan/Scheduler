package Controllers;

import Models.Appointment;
import Models.AppointmentDatabase;
import Models.UsersDatabase;
import javafx.collections.FXCollections;
import javafx.collections.ObservableList;
import javafx.event.ActionEvent;
import javafx.fxml.FXML;
import javafx.fxml.FXMLLoader;
import javafx.fxml.Initializable;
import javafx.scene.Parent;
import javafx.scene.Scene;
import javafx.scene.control.*;
import javafx.stage.Stage;

import java.io.File;
import java.io.FileWriter;
import java.io.IOException;
import java.net.URL;
import java.sql.SQLException;
import java.text.SimpleDateFormat;
import java.time.LocalDateTime;
import java.time.ZoneId;
import java.util.*;

interface LogActivity{
    public String getFileName();
}


/**
 * Controller for the log-in screen
 */
public class LoginController implements Initializable {

    /**Lambda Expression
     *
     * Simplifies code by passing the file name to functions that track logon activity
     */
    LogActivity logger = () -> {
        return "login_activity.txt";
    };

    /** Resource for English and French language phrases */
    private ResourceBundle resourceBundle;

    /** Label that displays software release version */
    @FXML
    private Label VersionLabel;

    /** Header text label */
    @FXML
    private Label HeaderLabel;

    /** Title label */
    @FXML
    private Label Title;

    /** Button to exit and close scheduler application */
    @FXML
    private Button ExitButton;

    /** Button to log on to the application and database */
    @FXML
    private Button LoginButton;

    /** Label that displays user's location */
    @FXML
    private Label VariableLocationLabel;

    /** Label that displays user's timezone */
    @FXML
    private Label VariableTimeZoneLabel;

    /** text field to enter username to log in */
    @FXML
    private TextField UserNameTextField;

    /** text field to enter password to log in */
    @FXML
    private TextField PasswordTextField;

    /** Label to identify username text field */
    @FXML
    private Label UserNameLabel;

    /** Label to identify variable time zone label */
    @FXML
    private Label TimeZoneLabel;

    /** Label to identify variable location label */
    @FXML
    private Label LocationLabel;

    /** Label to identify password text field */
    @FXML
    private Label PasswordLabel;


    /**Login method
     * Validates that the login was successful
     * records logon activity
     * @param event ActionEvent logs in when log in button is clicked
     * @throws IOException e
     * @throws SQLException e
     */

    @FXML
    void Login(ActionEvent event) throws IOException, SQLException {
        userNameFieldCheck(UserNameTextField.getText());
        passwordFieldCheck(PasswordTextField.getText());

        createLogFile();

        try {
            boolean valid = UsersDatabase.checkUsernamePassword(UserNameTextField.getText(), PasswordTextField.getText());
            if (valid) {

                loginSuccess();

                try {
                    Stage stage = (Stage) ((Button) event.getSource()).getScene().getWindow();
                    Parent scene = FXMLLoader.load(getClass().getResource("/views/HomeScreen.fxml"));
                    stage.setScene(new Scene(scene));
                    stage.setTitle("Home");
                    stage.show();
                } catch (Exception e) {
                    e.printStackTrace();



                    if (Locale.getDefault().getLanguage().equals("fr") || Locale.getDefault().getLanguage().equals("en")) {
                        Alert alert = new Alert(Alert.AlertType.ERROR);
                        alert.setTitle(resourceBundle.getString("errorDialog"));
                        alert.setContentText(resourceBundle.getString("loadError"));
                        alert.showAndWait();
                    }
                }
            }

            else {

                loginFailure();

                if (Locale.getDefault().getLanguage().equals("fr") || Locale.getDefault().getLanguage().equals("en")) {
                    Alert alert = new Alert(Alert.AlertType.ERROR);
                    alert.setTitle(resourceBundle.getString("erroralert"));
                    alert.setContentText(resourceBundle.getString("badUsernamePassword"));
                    alert.showAndWait();
                }
            }
        } catch (SQLException e) {
            e.printStackTrace();
        }


    }

    /** Creates login_activity.txt file if non-existent
     *  Catches Exception
     *  Retrieves file name value from Lambda Expression
     */
    private void createLogFile(){
        try {
            File newfile = new File(logger.getFileName());
            if (newfile.createNewFile()) {
                System.out.println("File created:" + newfile.getName());
            } else {
                System.out.println("File already exists. Location: "+ newfile.getPath());
            }
        } catch (IOException e){
            e.printStackTrace();
        }
    }

    /** Validates Username Text Field if not empty
     *  Catches Exception, throws alert, and prints stacktrace.
     * @param username Text Field Value for Username
     */
    private void userNameFieldCheck(String username){
        if (username.isEmpty()) {
            if (Locale.getDefault().getLanguage().equals("fr") || Locale.getDefault().getLanguage().equals("en")) {
                Alert alert = new Alert(Alert.AlertType.ERROR);
                alert.setTitle(resourceBundle.getString("erroralert"));
                alert.setContentText(resourceBundle.getString("usernameIsRequired"));
                alert.showAndWait();
            }
        }
    }

    /** Validates Password Text Field is not empty
     *  Catches Exception, throws alert, and prints stacktrace.
     * @param password Text Field Value for Username
     */
    private void passwordFieldCheck(String password){
        if (password.isEmpty()) {
            if (Locale.getDefault().getLanguage().equals("fr") || Locale.getDefault().getLanguage().equals("en")) {
                Alert alert = new Alert(Alert.AlertType.ERROR);
                alert.setTitle(resourceBundle.getString("erroralert"));
                alert.setContentText(resourceBundle.getString("passwordIsRequired"));
                alert.showAndWait();
            }
        }
    }

    /** Alerts user when logging on if there is an appointment in the next 15 minutes or that there are none
     *  Catches Exception
     */
    private void alertAppointment(){
        LocalDateTime localDateTime = LocalDateTime.now();
        LocalDateTime localDateTimePlus15 = localDateTime.plusMinutes(15);

        ObservableList<Appointment> upcomingAppointments = FXCollections.observableArrayList();


        try {
            ObservableList<Appointment> appointments = AppointmentDatabase.getAppointments();

            if (appointments != null) {
                for (Appointment appointment: appointments) {
                    if (appointment.getStartTime().isAfter(localDateTime) && appointment.getStartTime().isBefore(localDateTimePlus15)) {
                        upcomingAppointments.add(appointment);

                        if (Locale.getDefault().getLanguage().equals("fr") || Locale.getDefault().getLanguage().equals("en")) {
                            Alert alert = new Alert(Alert.AlertType.INFORMATION);
                            alert.setTitle(resourceBundle.getString("upcomingAppointmentAlert"));
                            alert.setContentText(
                                    resourceBundle.getString("FifteenMinutes") +
                                            "\n" +
                                            resourceBundle.getString("appointmentId") +
                                            " " +
                                            + appointment.getAppointmentId() +
                                            "\n" +
                                            resourceBundle.getString("date") +
                                            " " +
                                            appointment.getStartDate() +
                                            "\n" +
                                            resourceBundle.getString("time") +
                                            " " +
                                            appointment.getStartTime().toLocalTime());
                            alert.setResizable(true);
                            alert.showAndWait();
                        }
                    }
                }

                if (upcomingAppointments.size() < 1) {
                    if (Locale.getDefault().getLanguage().equals("fr") || Locale.getDefault().getLanguage().equals("en")) {
                        Alert alert = new Alert(Alert.AlertType.INFORMATION);
                        alert.setTitle(resourceBundle.getString("upcomingAppointmentAlert"));
                        alert.setContentText(resourceBundle.getString("noAppointments"));
                        alert.setResizable(true);
                        alert.showAndWait();
                    }
                }
            } else {
                if (Locale.getDefault().getLanguage().equals("fr") || Locale.getDefault().getLanguage().equals("en")) {
                    Alert alert = new Alert(Alert.AlertType.INFORMATION);
                    alert.setTitle(resourceBundle.getString("upcomingAppointmentAlert"));
                    alert.setContentText(resourceBundle.getString("noAppointments"));
                    alert.setResizable(true);
                    alert.showAndWait();
                }
            }

        } catch (SQLException e) {
            e.printStackTrace();
        }
    }

    /** Helper function to write user login success to login_activity.txt file
     *  Catches IOException
     *  gets file name value from Lambda Expression
     */
    private void loginSuccess() {

        alertAppointment();

        try {
            FileWriter fileWriter = new FileWriter(logger.getFileName(), true);
            SimpleDateFormat simpleDateFormat = new SimpleDateFormat("dd-MM-yyyy HH:mm:ss");
            Date date = new Date(System.currentTimeMillis());
            fileWriter.write("Successful Login: Username=" + UserNameTextField.getText() + " Password=" + PasswordTextField.getText() + " Timestamp: " + simpleDateFormat.format(date) + "\n");
            fileWriter.close();
        } catch (IOException e) {
            e.printStackTrace();
        }
    }

    /** Helper function to write user login failure to login_activity.txt file
     *  Catches IOException
     *  gets file name value from Lambda Expression
     */
    private void loginFailure() {
        try {
            FileWriter fileWriter = new FileWriter(logger.getFileName(), true);
            SimpleDateFormat simpleDateFormat = new SimpleDateFormat("dd-MM-yyyy HH:mm:ss");
            Date date = new Date(System.currentTimeMillis());
            fileWriter.write("Failed Login: Username=" + UserNameTextField.getText() + " Password=" + PasswordTextField.getText() + " Timestamp: " + simpleDateFormat.format(date) + "\n");
            fileWriter.close();
        }

        catch (IOException e) {
            e.printStackTrace();
        }
    }

    /** Closes the application
     * @param event ActionEvent close
     * Catches Exception
     */
    @FXML
    void Cancel(ActionEvent event) {
        ResourceBundle resourceBundle = ResourceBundle.getBundle("Languages/language", Locale.getDefault());

        if (Locale.getDefault().getLanguage().equals("fr") || Locale.getDefault().getLanguage().equals("en")) {
            // CONFIRMATION is same in French and English
            Alert alert = new Alert(Alert.AlertType.CONFIRMATION, resourceBundle.getString("cancelQuit"));
            Optional<ButtonType> result = alert.showAndWait();

            if (result.isPresent() && result.get() == ButtonType.OK) {
                Stage stage = (Stage) ((Button) event.getSource()).getScene().getWindow();
                stage.close();
            }
        }
    }

    /** Initializes the Login View
     *  Gets region and converts sets appropriate language
     *  @param location Location
     *  @param resources Resources
     */
    @Override
    public void initialize(URL location, ResourceBundle resources) {
        resourceBundle = ResourceBundle.getBundle("Languages/language", Locale.getDefault());

        if (Locale.getDefault().getLanguage().equals("fr") || Locale.getDefault().getLanguage().equals("en")){

            Title.setText(resourceBundle.getString("title"));
            UserNameLabel.setText(resourceBundle.getString("username"));
            PasswordLabel.setText(resourceBundle.getString("password"));
            LocationLabel.setText(resourceBundle.getString("location"));
            VariableLocationLabel.setText(resourceBundle.getString("country"));
            TimeZoneLabel.setText(resourceBundle.getString("timezone"));
            VariableTimeZoneLabel.setText(String.valueOf(ZoneId.of(TimeZone.getDefault().getID())));
            LoginButton.setText(resourceBundle.getString("login"));
            ExitButton.setText(resourceBundle.getString("cancel"));
        }
    }
}
